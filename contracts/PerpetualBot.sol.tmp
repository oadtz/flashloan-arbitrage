// Sources flattened with hardhat v2.22.2 https://hardhat.org

// SPDX-License-Identifier: MIT

// File @openzeppelin/contracts/utils/Context.sol@v5.0.2

// Original license: SPDX_License_Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)

pragma solidity ^0.8.20;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }

    function _contextSuffixLength() internal view virtual returns (uint256) {
        return 0;
    }
}


// File @openzeppelin/contracts/access/Ownable.sol@v5.0.2

// Original license: SPDX_License_Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)

pragma solidity ^0.8.20;

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * The initial owner is set to the address provided by the deployer. This can
 * later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    /**
     * @dev The caller account is not authorized to perform an operation.
     */
    error OwnableUnauthorizedAccount(address account);

    /**
     * @dev The owner is not a valid owner account. (eg. `address(0)`)
     */
    error OwnableInvalidOwner(address owner);

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.
     */
    constructor(address initialOwner) {
        if (initialOwner == address(0)) {
            revert OwnableInvalidOwner(address(0));
        }
        _transferOwnership(initialOwner);
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        if (owner() != _msgSender()) {
            revert OwnableUnauthorizedAccount(_msgSender());
        }
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby disabling any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        if (newOwner == address(0)) {
            revert OwnableInvalidOwner(address(0));
        }
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


// File contracts/PerpetualBot.sol

// Original license: SPDX_License_Identifier: MIT
pragma solidity ^0.8.20;

interface IFuture {
    struct OpenDataInput {
        // Pair.base
        address pairBase;
        bool isLong;
        // BUSD/USDT address
        address tokenIn;
        uint96 amountIn; // tokenIn decimals
        uint80 qty; // 1e10
        // Limit Order: limit price
        // Market Trade: worst price acceptable
        uint64 price; // 1e8
        uint64 stopLoss; // 1e8
        uint64 takeProfit; // 1e8
        uint24 broker;
    }

    function openMarketTradeBNB(
        OpenDataInput memory openData
    ) external payable returns (bytes32 tradeHash);

    function closeTrade(bytes32 tradeHash) external;
}

contract PerpetualBot is Ownable {
    bytes32 private _lastTradeHash;
    address public immutable MARKET;

    constructor(address _market) Ownable(msg.sender) {
        MARKET = _market;
    }

    function openTradeBNB(
        address _token,
        bool _isLong,
        uint96 _amount,
        uint80 _qty,
        uint64 _price,
        uint64 _takeProfit
    ) external onlyOwner returns (bytes32 tradeHash) {
        require(address(this).balance >= _amount, "Insufficient balance");

        IFuture.OpenDataInput memory openData = IFuture.OpenDataInput({
            pairBase: _token,
            isLong: _isLong,
            tokenIn: address(0),
            amountIn: _amount,
            qty: _qty,
            price: _price,
            stopLoss: 0,
            takeProfit: _takeProfit,
            broker: 2
        });

        tradeHash = IFuture(MARKET).openMarketTradeBNB{value: _amount}(
            openData
        );

        _lastTradeHash = tradeHash;
    }

    function closeTrade() external onlyOwner {
        if (_lastTradeHash != 0) {
            IFuture(MARKET).closeTrade(_lastTradeHash);
            _lastTradeHash = 0;
        }
    }

    function withdrawBNB() external onlyOwner {
        uint256 balance = address(this).balance;
        payable(owner()).transfer(balance);
    }

    function depositBNB() external payable {}

    receive() external payable {}
}
