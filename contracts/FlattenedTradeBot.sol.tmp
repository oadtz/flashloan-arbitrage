// Sources flattened with hardhat v2.22.2 https://hardhat.org

// SPDX-License-Identifier: AGPL-3.0 AND MIT

// File @aave/core-v3/contracts/dependencies/openzeppelin/contracts/Address.sol@v1.19.3

// Original license: SPDX_License_Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)

pragma solidity ^0.8.0;

/**
 * @dev Collection of functions related to the address type
 */
library Address {
  /**
   * @dev Returns true if `account` is a contract.
   *
   * [IMPORTANT]
   * ====
   * It is unsafe to assume that an address for which this function returns
   * false is an externally-owned account (EOA) and not a contract.
   *
   * Among others, `isContract` will return false for the following
   * types of addresses:
   *
   *  - an externally-owned account
   *  - a contract in construction
   *  - an address where a contract will be created
   *  - an address where a contract lived, but was destroyed
   * ====
   */
  function isContract(address account) internal view returns (bool) {
    // This method relies on extcodesize, which returns 0 for contracts in
    // construction, since the code is only stored at the end of the
    // constructor execution.

    uint256 size;
    assembly {
      size := extcodesize(account)
    }
    return size > 0;
  }

  /**
   * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
   * `recipient`, forwarding all available gas and reverting on errors.
   *
   * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
   * of certain opcodes, possibly making contracts go over the 2300 gas limit
   * imposed by `transfer`, making them unable to receive funds via
   * `transfer`. {sendValue} removes this limitation.
   *
   * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].
   *
   * IMPORTANT: because control is transferred to `recipient`, care must be
   * taken to not create reentrancy vulnerabilities. Consider using
   * {ReentrancyGuard} or the
   * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
   */
  function sendValue(address payable recipient, uint256 amount) internal {
    require(address(this).balance >= amount, 'Address: insufficient balance');

    (bool success, ) = recipient.call{value: amount}('');
    require(success, 'Address: unable to send value, recipient may have reverted');
  }

  /**
   * @dev Performs a Solidity function call using a low level `call`. A
   * plain `call` is an unsafe replacement for a function call: use this
   * function instead.
   *
   * If `target` reverts with a revert reason, it is bubbled up by this
   * function (like regular Solidity function calls).
   *
   * Returns the raw returned data. To convert to the expected return value,
   * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
   *
   * Requirements:
   *
   * - `target` must be a contract.
   * - calling `target` with `data` must not revert.
   *
   * _Available since v3.1._
   */
  function functionCall(address target, bytes memory data) internal returns (bytes memory) {
    return functionCall(target, data, 'Address: low-level call failed');
  }

  /**
   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with
   * `errorMessage` as a fallback revert reason when `target` reverts.
   *
   * _Available since v3.1._
   */
  function functionCall(
    address target,
    bytes memory data,
    string memory errorMessage
  ) internal returns (bytes memory) {
    return functionCallWithValue(target, data, 0, errorMessage);
  }

  /**
   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
   * but also transferring `value` wei to `target`.
   *
   * Requirements:
   *
   * - the calling contract must have an ETH balance of at least `value`.
   * - the called Solidity function must be `payable`.
   *
   * _Available since v3.1._
   */
  function functionCallWithValue(
    address target,
    bytes memory data,
    uint256 value
  ) internal returns (bytes memory) {
    return functionCallWithValue(target, data, value, 'Address: low-level call with value failed');
  }

  /**
   * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but
   * with `errorMessage` as a fallback revert reason when `target` reverts.
   *
   * _Available since v3.1._
   */
  function functionCallWithValue(
    address target,
    bytes memory data,
    uint256 value,
    string memory errorMessage
  ) internal returns (bytes memory) {
    require(address(this).balance >= value, 'Address: insufficient balance for call');
    require(isContract(target), 'Address: call to non-contract');

    (bool success, bytes memory returndata) = target.call{value: value}(data);
    return verifyCallResult(success, returndata, errorMessage);
  }

  /**
   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
   * but performing a static call.
   *
   * _Available since v3.3._
   */
  function functionStaticCall(
    address target,
    bytes memory data
  ) internal view returns (bytes memory) {
    return functionStaticCall(target, data, 'Address: low-level static call failed');
  }

  /**
   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
   * but performing a static call.
   *
   * _Available since v3.3._
   */
  function functionStaticCall(
    address target,
    bytes memory data,
    string memory errorMessage
  ) internal view returns (bytes memory) {
    require(isContract(target), 'Address: static call to non-contract');

    (bool success, bytes memory returndata) = target.staticcall(data);
    return verifyCallResult(success, returndata, errorMessage);
  }

  /**
   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
   * but performing a delegate call.
   *
   * _Available since v3.4._
   */
  function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
    return functionDelegateCall(target, data, 'Address: low-level delegate call failed');
  }

  /**
   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
   * but performing a delegate call.
   *
   * _Available since v3.4._
   */
  function functionDelegateCall(
    address target,
    bytes memory data,
    string memory errorMessage
  ) internal returns (bytes memory) {
    require(isContract(target), 'Address: delegate call to non-contract');

    (bool success, bytes memory returndata) = target.delegatecall(data);
    return verifyCallResult(success, returndata, errorMessage);
  }

  /**
   * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the
   * revert reason using the provided one.
   *
   * _Available since v4.3._
   */
  function verifyCallResult(
    bool success,
    bytes memory returndata,
    string memory errorMessage
  ) internal pure returns (bytes memory) {
    if (success) {
      return returndata;
    } else {
      // Look for revert reason and bubble it up if present
      if (returndata.length > 0) {
        // The easiest way to bubble the revert reason is using memory via assembly

        assembly {
          let returndata_size := mload(returndata)
          revert(add(32, returndata), returndata_size)
        }
      } else {
        revert(errorMessage);
      }
    }
  }
}


// File @aave/core-v3/contracts/dependencies/openzeppelin/contracts/IERC20.sol@v1.19.3

// Original license: SPDX_License_Identifier: AGPL-3.0
pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
  /**
   * @dev Returns the amount of tokens in existence.
   */
  function totalSupply() external view returns (uint256);

  /**
   * @dev Returns the amount of tokens owned by `account`.
   */
  function balanceOf(address account) external view returns (uint256);

  /**
   * @dev Moves `amount` tokens from the caller's account to `recipient`.
   *
   * Returns a boolean value indicating whether the operation succeeded.
   *
   * Emits a {Transfer} event.
   */
  function transfer(address recipient, uint256 amount) external returns (bool);

  /**
   * @dev Returns the remaining number of tokens that `spender` will be
   * allowed to spend on behalf of `owner` through {transferFrom}. This is
   * zero by default.
   *
   * This value changes when {approve} or {transferFrom} are called.
   */
  function allowance(address owner, address spender) external view returns (uint256);

  /**
   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
   *
   * Returns a boolean value indicating whether the operation succeeded.
   *
   * IMPORTANT: Beware that changing an allowance with this method brings the risk
   * that someone may use both the old and the new allowance by unfortunate
   * transaction ordering. One possible solution to mitigate this race
   * condition is to first reduce the spender's allowance to 0 and set the
   * desired value afterwards:
   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
   *
   * Emits an {Approval} event.
   */
  function approve(address spender, uint256 amount) external returns (bool);

  /**
   * @dev Moves `amount` tokens from `sender` to `recipient` using the
   * allowance mechanism. `amount` is then deducted from the caller's
   * allowance.
   *
   * Returns a boolean value indicating whether the operation succeeded.
   *
   * Emits a {Transfer} event.
   */
  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

  /**
   * @dev Emitted when `value` tokens are moved from one account (`from`) to
   * another (`to`).
   *
   * Note that `value` may be zero.
   */
  event Transfer(address indexed from, address indexed to, uint256 value);

  /**
   * @dev Emitted when the allowance of a `spender` for an `owner` is set by
   * a call to {approve}. `value` is the new allowance.
   */
  event Approval(address indexed owner, address indexed spender, uint256 value);
}


// File @aave/core-v3/contracts/dependencies/openzeppelin/contracts/SafeERC20.sol@v1.19.3

// Original license: SPDX_License_Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)

pragma solidity ^0.8.0;


/**
 * @title SafeERC20
 * @dev Wrappers around ERC20 operations that throw on failure (when the token
 * contract returns false). Tokens that return no value (and instead revert or
 * throw on failure) are also supported, non-reverting calls are assumed to be
 * successful.
 * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,
 * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.
 */
library SafeERC20 {
  using Address for address;

  function safeTransfer(IERC20 token, address to, uint256 value) internal {
    _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
  }

  function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
    _callOptionalReturn(
      token,
      abi.encodeWithSelector(token.transferFrom.selector, from, to, value)
    );
  }

  /**
   * @dev Deprecated. This function has issues similar to the ones found in
   * {IERC20-approve}, and its usage is discouraged.
   *
   * Whenever possible, use {safeIncreaseAllowance} and
   * {safeDecreaseAllowance} instead.
   */
  function safeApprove(IERC20 token, address spender, uint256 value) internal {
    // safeApprove should only be called when setting an initial allowance,
    // or when resetting it to zero. To increase and decrease it, use
    // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'
    require(
      (value == 0) || (token.allowance(address(this), spender) == 0),
      'SafeERC20: approve from non-zero to non-zero allowance'
    );
    _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
  }

  function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
    uint256 newAllowance = token.allowance(address(this), spender) + value;
    _callOptionalReturn(
      token,
      abi.encodeWithSelector(token.approve.selector, spender, newAllowance)
    );
  }

  function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
    unchecked {
      uint256 oldAllowance = token.allowance(address(this), spender);
      require(oldAllowance >= value, 'SafeERC20: decreased allowance below zero');
      uint256 newAllowance = oldAllowance - value;
      _callOptionalReturn(
        token,
        abi.encodeWithSelector(token.approve.selector, spender, newAllowance)
      );
    }
  }

  /**
   * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement
   * on the return value: the return value is optional (but if data is returned, it must not be false).
   * @param token The token targeted by the call.
   * @param data The call data (encoded using abi.encode or one of its variants).
   */
  function _callOptionalReturn(IERC20 token, bytes memory data) private {
    // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since
    // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that
    // the target address contains contract code and also asserts for success in the low-level call.

    bytes memory returndata = address(token).functionCall(data, 'SafeERC20: low-level call failed');
    if (returndata.length > 0) {
      // Return data is optional
      require(abi.decode(returndata, (bool)), 'SafeERC20: ERC20 operation did not succeed');
    }
  }
}


// File @openzeppelin/contracts/utils/Context.sol@v5.0.2

// Original license: SPDX_License_Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)

pragma solidity ^0.8.20;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }

    function _contextSuffixLength() internal view virtual returns (uint256) {
        return 0;
    }
}


// File @openzeppelin/contracts/access/Ownable.sol@v5.0.2

// Original license: SPDX_License_Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)

pragma solidity ^0.8.20;

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * The initial owner is set to the address provided by the deployer. This can
 * later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    /**
     * @dev The caller account is not authorized to perform an operation.
     */
    error OwnableUnauthorizedAccount(address account);

    /**
     * @dev The owner is not a valid owner account. (eg. `address(0)`)
     */
    error OwnableInvalidOwner(address owner);

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.
     */
    constructor(address initialOwner) {
        if (initialOwner == address(0)) {
            revert OwnableInvalidOwner(address(0));
        }
        _transferOwnership(initialOwner);
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        if (owner() != _msgSender()) {
            revert OwnableUnauthorizedAccount(_msgSender());
        }
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby disabling any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        if (newOwner == address(0)) {
            revert OwnableInvalidOwner(address(0));
        }
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


// File @aave/core-v3/contracts/dependencies/openzeppelin/contracts/SafeMath.sol@v1.19.3

// Original license: SPDX_License_Identifier: AGPL-3.0
pragma solidity ^0.8.0;

/// @title Optimized overflow and underflow safe math operations
/// @notice Contains methods for doing math operations that revert on overflow or underflow for minimal gas cost
library SafeMath {
  /// @notice Returns x + y, reverts if sum overflows uint256
  /// @param x The augend
  /// @param y The addend
  /// @return z The sum of x and y
  function add(uint256 x, uint256 y) internal pure returns (uint256 z) {
    unchecked {
      require((z = x + y) >= x);
    }
  }

  /// @notice Returns x - y, reverts if underflows
  /// @param x The minuend
  /// @param y The subtrahend
  /// @return z The difference of x and y
  function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {
    unchecked {
      require((z = x - y) <= x);
    }
  }

  /// @notice Returns x - y, reverts if underflows
  /// @param x The minuend
  /// @param y The subtrahend
  /// @param message The error msg
  /// @return z The difference of x and y
  function sub(uint256 x, uint256 y, string memory message) internal pure returns (uint256 z) {
    unchecked {
      require((z = x - y) <= x, message);
    }
  }

  /// @notice Returns x * y, reverts if overflows
  /// @param x The multiplicand
  /// @param y The multiplier
  /// @return z The product of x and y
  function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {
    unchecked {
      require(x == 0 || (z = x * y) / x == y);
    }
  }

  /// @notice Returns x / y, reverts if overflows - no specific check, solidity reverts on division by 0
  /// @param x The numerator
  /// @param y The denominator
  /// @return z The product of x and y
  function div(uint256 x, uint256 y) internal pure returns (uint256 z) {
    return x / y;
  }
}


// File contracts/TradeBot.sol

// Original license: SPDX_License_Identifier: MIT
pragma solidity ^0.8.20;




// import "hardhat/console.sol";

interface IRouter {
    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);
    function swapExactETHForTokens(uint256 amountOutMin, address[] calldata path, address to, uint256 deadline) external payable returns (uint256[] memory amounts);
    function swapExactTokensForETH(uint256 amountIn, uint256 amountOutMin, address[] calldata path, address to, uint256 deadline) external returns (uint256[] memory amounts);
}

contract TradeBot is Ownable {
    using SafeERC20 for IERC20;
    using SafeMath for uint256;

    struct Trade {
        uint256 amountETH;
        uint256 amountToken;
    }

    struct TradeData {
        address bestRouter;
        uint256 amountIn; // Note that amountIn is always be in the different unit from amountOut
        uint256 amountOut;
        uint256 profit; // Profit is in the same unit as amountOut (lastTradedAmountOut - amountOut)
    }

    mapping(address => Trade) private _trades;
    address private immutable ETH = address(0);

    constructor() Ownable(msg.sender) {
        // console.log("TradeBot deployed");
    }

    function safeIncreaseAllowance(IERC20 token, address spender, uint256 amountNeeded) internal {
        uint256 currentAllowance = token.allowance(address(this), spender);
        if(currentAllowance < amountNeeded) {
            token.safeApprove(spender, 0);
            token.safeApprove(spender, type(uint256).max);
        }
    }

    function checkTrade(
        address[] calldata routers,
        address token,
        uint256 gasCostLimitInWei
    ) external view returns (string memory direction, address router, uint256 amountETH, uint256 amountToken) {
        // Calculate initial and target amounts for both sides.
        // console.log("Checking trade from ETH to Token");
        TradeData memory ethToTokenResult = getTradeAnalysis(routers, ETH, token, gasCostLimitInWei);
        uint256 ethToTokenProfitRatio = ethToTokenResult.amountOut > 0 ? ethToTokenResult.profit.mul(100).div(ethToTokenResult.amountOut) : 0;
        // console.log("ETH to Token result:", ethToTokenResult.amountIn, ethToTokenResult.amountOut);
        // console.log("ETH to Token profit ratio:", ethToTokenProfitRatio);

        // console.log("Checking trade from Token to ETH");
        TradeData memory tokenToETHResult = getTradeAnalysis(routers, token, ETH, gasCostLimitInWei);
        uint256 tokenToETHProfitRatio = tokenToETHResult.amountOut > 0 ? tokenToETHResult.profit.mul(100).div(tokenToETHResult.amountOut) : 0;
        // console.log("Token to ETH result:", tokenToETHResult.amountIn, tokenToETHResult.amountOut, tokenToETHResult.profit);
        // console.log("Token to ETH profit ratio:", tokenToETHProfitRatio);

        // Determine direction based on return profits
        if (ethToTokenProfitRatio > tokenToETHProfitRatio) {
            // amoutIn is in ETH, amountOut is in Token, profit is in Token
            return ("eth_to_token", ethToTokenResult.bestRouter, ethToTokenResult.amountIn, ethToTokenResult.amountOut);
        } else if (tokenToETHProfitRatio > ethToTokenProfitRatio) {
            // amoutIn is in Token, amountOut is in ETH, profit is in ETH
            return ("token_to_eth", tokenToETHResult.bestRouter, tokenToETHResult.amountOut, tokenToETHResult.amountIn);
        } else {
            return ("none", address(0), 0, 0);
        }
    }

     // function checkTrade(
    //     address[] calldata routers,
    //     address token,
    //     uint256 gasCostLimitInWei
    // ) external view returns (string memory direction, address bestRouter, uint256 amountETH, uint256 amountToken) {
    //     uint256 currentETHBalance = address(this).balance;
    //     uint256 currentTokenBalance = IERC20(token).balanceOf(address(this));
 
    //     console.log("Current ETH balance:", currentETHBalance);
    //     console.log("Current Token balance:", currentTokenBalance);

    //     console.log("Getting best trade analysis for ETH to Token");
    //     TradeAnalysis memory ethToToken = getBestTradeAnalysis(routers, address(0), token, gasCostLimitInWei);
    //     console.log("Getting best trade analysis for Token to ETH");
    //     TradeAnalysis memory tokenToETH = getBestTradeAnalysis(routers, token, address(0), gasCostLimitInWei);

    //     console.log("ETH to Token best router:", ethToToken.bestRouter, "Profit:", ethToToken.profit); // Unit in Token
    //     console.log("Token to ETH best router:", tokenToETH.bestRouter, "Profit:", tokenToETH.profit); // Unit in ETH

    //     // Determine direction based on return profits
    //     if (tokenToETH.profit > ethToToken.profit) {
    //         return ("to_eth", tokenToETH.bestRouter, tokenToETH.amountIn, tokenToETH.amountOut);
    //     } else if (ethToToken.profit > tokenToETH.profit) {
    //         return ("to_token", ethToToken.bestRouter, ethToToken.amountIn, ethToToken.amountOut);
    //     } else {
    //         return ("none", address(0), 0, 0);
    //     }
    // }

    function getTradeAnalysis(
        address[] calldata routers,
        address tokenIn,
        address tokenOut,
        uint256 gasCostLimitInWei
    ) internal view returns (TradeData memory tradeData) {
        // Calculate the actual amount in
        uint256 currentTokenInBalance = tokenIn == ETH ? address(this).balance : IERC20(tokenIn).balanceOf(address(this));
        // console.log("Current tokenIn in balance:", currentTokenInBalance);
        uint256 lastTradeOfTokenIn = tokenIn == ETH ? _trades[tokenOut].amountETH : _trades[tokenIn].amountToken;
        uint256 lastTradeOfTokenOut = tokenIn == ETH ? _trades[tokenOut].amountToken : _trades[tokenIn].amountETH;
        uint256 expectedAmountOut = tradeData.amountIn <= lastTradeOfTokenIn ? lastTradeOfTokenOut : 0;

        // Find the best router
        tradeData.bestRouter = address(0);
        tradeData.amountIn = lastTradeOfTokenIn > 0 ? min(currentTokenInBalance, lastTradeOfTokenIn) : currentTokenInBalance;
        // console.log("Amount in (actual):", tradeData.amountIn);
        tradeData.amountOut = expectedAmountOut;
        // console.log("Amount out (expected):", tradeData.amountOut);
        tradeData.profit = 0;

        if (tradeData.amountIn > 0) {
            for (uint8 i = 0; i < routers.length; i++) {
                uint256 amountOut = getAmountOut(routers[i], tokenIn, tokenOut, tradeData.amountIn);
                // console.log("Amount out (actual) for router:", i, amountOut);

                if (amountOut > tradeData.amountOut) {
                    tradeData.bestRouter = routers[i];
                    tradeData.amountOut = amountOut;

                    // Calculate the profit
                    uint256 gasCostLimit = tokenOut == ETH ? gasCostLimitInWei : gasCostLimitInWei.mul(amountOut).div(tradeData.amountIn);
                    // console.log("Gas cost limit for router:", i, gasCostLimit);
                    tradeData.profit = amountOut > gasCostLimit + expectedAmountOut ? amountOut.sub(gasCostLimit).sub(expectedAmountOut) : 0;
                    // console.log("Profit (actual):", tradeData.profit);
                }
            }
        }

        // console.log("Best router:", tradeData.bestRouter);
        // console.log("Amount out:", tradeData.amountOut);
        // console.log("Profit:", tradeData.profit);
    }


    // function getBestTradeAnalysis(
    //     address[] calldata routers,
    //     address tokenIn,
    //     address tokenOut,
    //     uint256 gasCostLimitInWei
    // ) internal view returns (TradeAnalysis memory analysis) {
    //     uint256 bestProfit = 0;
    //     uint256 currentTokenBalance = tokenIn == address(0) ? address(this).balance : IERC20(tokenIn).balanceOf(address(this));
    //     uint256 amountIn = tokenOut == address(0) ? _trades[tokenIn].amountETH : _trades[tokenIn].amountToken;
    //     uint256 actualAmountIn = amountIn > 0 ? min(amountIn, currentTokenBalance) : currentTokenBalance;
    //     uint256 targetAmountOut = tokenIn == address(0) ? _trades[tokenIn].amountToken : _trades[tokenIn].amountETH;

    //     for (uint256 i = 0; i < routers.length; i++) {
    //         console.log("i:", i);
    //         console.log("Token in:", tokenIn);
    //         console.log("Token out:", tokenOut);

    //         uint256 amountOut = actualAmountIn == 0 ? 0 : getAmountOut(routers[i], tokenIn, tokenOut, actualAmountIn);

    //         console.log("Amount In:", actualAmountIn);
    //         console.log("Amount Out:", amountOut);
    //         console.log("Target Amount Out:", targetAmountOut);

    //         if (amountOut > 0) {
    //             uint256 profit = amountOut > targetAmountOut ? amountOut - targetAmountOut : 0;
    //             uint256 gasCost;

    //             if (tokenOut == address(0)) {
    //                 gasCost = gasCostLimitInWei;
    //                 console.log("Gas cost:", gasCost);
    //             } else {
    //                 gasCost = targetAmountOut.mul(gasCostLimitInWei).div(amountOut);
    //                 console.log("Gas cost:", gasCost);
    //             }

    //             analysis.amountIn = actualAmountIn;
    //             if (profit > gasCost && profit - gasCost > bestProfit) {
    //                 analysis.bestRouter = routers[i];
    //                 analysis.amountOut = amountOut;
    //                 analysis.profit = profit - gasCost;
    //                 bestProfit = profit - gasCost;
    //             }
    //         }
    //     }
    // }

    function executeTradeETHForTokens(
        address router,
        address token,
        uint256 amountIn,
        uint256 amountOutMin
    ) external onlyOwner {
        // console.log("Executing trade ETH for Tokens");
        // console.log("Router:", router);
        // console.log("Token:", token);
        // console.log("Amount in:", amountIn);
        // console.log("Amount out min:", amountOutMin);
        // console.log("Contract ETH balance:", address(this).balance);

        require(address(this).balance >= amountIn, "Insufficient contract ETH balance");

        address[] memory path = new address[](2);
        path[0] = address(0);
        path[1] = token;

        uint256 balanceBefore = IERC20(token).balanceOf(address(this));
        IRouter(router).swapExactETHForTokens{ value: amountIn }(amountOutMin, path, address(this), block.timestamp);
        uint256 balanceAfter = IERC20(token).balanceOf(address(this));

        require(balanceAfter > balanceBefore, "Trade execution failed");

        _trades[token] = Trade(amountIn, balanceAfter - balanceBefore);
        // console.log("Current _trades:", _trades[token].amountETH, _trades[token].amountToken);
    }

    function executeTradeTokensForETH(
        address router,
        address token,
        uint256 amountIn,
        uint256 amountOutMin
    ) external onlyOwner {
        // console.log("Executing trade Tokens for ETH");
        // console.log("Router:", router);
        // console.log("Token:", token);
        // console.log("Amount in:", amountIn);
        // console.log("Amount out min:", amountOutMin);
        // console.log("Contract token balance:", IERC20(token).balanceOf(address(this)));

        address[] memory path = new address[](2);
        path[0] = token;
        path[1] = address(0);

        safeIncreaseAllowance(IERC20(token), router, amountIn);

        uint256 balanceBefore = address(this).balance;
        IRouter(router).swapExactTokensForETH(amountIn, amountOutMin, path, address(this), block.timestamp);
        uint256 balanceAfter = address(this).balance;

        require(balanceAfter > balanceBefore, "Trade execution failed");

        _trades[token] = Trade(balanceAfter - balanceBefore, amountIn);
        // console.log("Current _trades:", _trades[token].amountETH, _trades[token].amountToken);
    }

    function getAmountOut(address router, address tokenIn, address tokenOut, uint256 amountIn) internal view returns (uint256) {
        address[] memory path;
        if (tokenIn == address(0)) {
            path = new address[](2);
            path[0] = address(0);
            path[1] = tokenOut;
        } else if (tokenOut == address(0)) {
            path = new address[](2);
            path[0] = tokenIn;
            path[1] = address(0);
        } else {
            path = new address[](3);
            path[0] = tokenIn;
            path[1] = address(0);
            path[2] = tokenOut;
        }

        uint256[] memory amounts = IRouter(router).getAmountsOut(amountIn, path);
        return amounts[amounts.length - 1];
    }

    function getBestRouterTokenToETH(address[] calldata routers, address token, uint256 amountIn) internal view returns (address, uint256) {
        address bestRouter;
        uint256 bestAmountOut;

        for (uint256 i = 0; i < routers.length; i++) {
            // console.log ("i:", i);
            // console.log("Router:", routers[i]);
            // console.log("Token:", token);
            // console.log("Amount in:", amountIn);

            uint256 amountOut = getAmountOut(routers[i], token, address(0), amountIn);
            if (amountOut > bestAmountOut) {
                // console.log("Found better router:", routers[i]);
                bestRouter = routers[i];
                bestAmountOut = amountOut;
            }
        }

        // console.log("Best router:", bestRouter);
        // console.log("Best amount out:", bestAmountOut);

        return (bestRouter, bestAmountOut);
    }

    function getBestRouterETHToToken(address[] calldata routers, address token, uint256 amountIn) internal view returns (address, uint256) {
        address bestRouter;
        uint256 bestAmountOut;

        for (uint256 i = 0; i < routers.length; i++) {
            // console.log ("i:", i);
            // console.log("Router:", routers[i]);
            // console.log("Token:", token);
            // console.log("Amount in:", amountIn);
            uint256 amountOut = getAmountOut(routers[i], address(0), token, amountIn);

            if (amountOut > bestAmountOut) {
                // console.log("Found better router:", routers[i]);
                bestRouter = routers[i];
                bestAmountOut = amountOut;
            }
        }

        // console.log("Best router:", bestRouter);
        // console.log("Best amount out:", bestAmountOut);

        return (bestRouter, bestAmountOut);
    }

    function getTrades(address token) external view onlyOwner returns (uint256, uint256) {
        return (_trades[token].amountETH, _trades[token].amountToken);
    }

    function getTokenBalance(address token) external view onlyOwner returns (uint256) {
        return IERC20(token).balanceOf(address(this));
    }

    function getETHBalance() external view onlyOwner returns (uint256) {
        return address(this).balance;
    }

    function withdrawToken(address token) external onlyOwner {
        uint256 balance = IERC20(token).balanceOf(address(this));
        IERC20(token).safeTransfer(owner(), balance);
    }

    function withdrawETH() external onlyOwner {
        uint256 balance = address(this).balance;
        payable(owner()).transfer(balance);
    }

    function min(uint256 a, uint256 b) internal pure returns (uint256) {
        return a < b ? a : b;
    }

    receive() external payable {}
}
